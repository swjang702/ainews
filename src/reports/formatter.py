"""Report formatting for different output formats."""

import json
from datetime import datetime
from typing import Dict, Any
from ..models import WeeklyReport, Article


class ReportFormatter:
    """Formats reports in different output formats."""
    
    def __init__(self, output_format: str = "markdown"):
        self.output_format = output_format.lower()
        
        if self.output_format not in ["markdown", "html", "json"]:
            raise ValueError(f"Unsupported output format: {output_format}")
    
    def format_weekly_report(self, report: WeeklyReport) -> str:
        """Format weekly report in the specified format."""
        if self.output_format == "markdown":
            return self._format_markdown(report)
        elif self.output_format == "html":
            return self._format_html(report)
        elif self.output_format == "json":
            return self._format_json(report)
    
    def format_topic_report(self, report_data: Dict[str, Any]) -> str:
        """Format topic-focused report."""
        if self.output_format == "markdown":
            return self._format_topic_markdown(report_data)
        elif self.output_format == "html":
            return self._format_topic_html(report_data)
        elif self.output_format == "json":
            return json.dumps(report_data, indent=2, ensure_ascii=False)
    
    def _format_markdown(self, report: WeeklyReport) -> str:
        """Format report as Markdown."""
        lines = []
        
        # Header
        lines.append(f"# Weekly AI News Report")
        lines.append(f"**Period:** {report.week_start} to {report.week_end}")
        lines.append(f"**Generated:** {report.generated_at}")
        lines.append(f"**Total Articles:** {report.total_articles}")
        lines.append("")
        
        # Summary
        if report.summary:
            lines.append("## Executive Summary")
            lines.append(report.summary)
            lines.append("")
        
        # Topic Distribution
        if report.articles_by_topic:
            lines.append("## Topic Distribution")
            sorted_topics = sorted(report.articles_by_topic.items(), 
                                 key=lambda x: x[1], reverse=True)
            
            for topic, count in sorted_topics:
                lines.append(f"- **{topic}:** {count} articles")
            lines.append("")
        
        # Top Articles
        if report.top_articles:
            lines.append("## Top Articles")
            
            for i, article in enumerate(report.top_articles[:10], 1):
                lines.append(f"### {i}. {article.title}")
                lines.append(f"**Source:** {article.source.title()}")
                lines.append(f"**URL:** {article.url}")
                lines.append(f"**Relevance Score:** {article.relevance_score:.3f}")
                
                if article.related_topics:
                    topics_str = ", ".join(article.related_topics)
                    lines.append(f"**Topics:** {topics_str}")
                
                if article.summary:
                    lines.append(f"**Summary:** {article.summary}")
                
                lines.append("")
        
        # Footer
        lines.append("---")
        lines.append("*Generated by ainews - AI-powered news curation system*")
        
        return "\n".join(lines)
    
    def _format_html(self, report: WeeklyReport) -> str:
        """Format report as HTML."""
        html_parts = []
        
        # HTML header
        html_parts.append("""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weekly AI News Report</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1, h2, h3 { color: #333; }
        .meta { color: #666; font-size: 0.9em; }
        .article { border: 1px solid #ddd; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .score { background: #007acc; color: white; padding: 2px 6px; border-radius: 3px; font-size: 0.8em; }
        .topics { color: #007acc; font-size: 0.9em; }
        .summary { background: #f9f9f9; padding: 10px; border-left: 3px solid #007acc; margin: 10px 0; }
        ul { padding-left: 20px; }
    </style>
</head>
<body>""")
        
        # Header
        html_parts.append(f"<h1>Weekly AI News Report</h1>")
        html_parts.append(f'<div class="meta">')
        html_parts.append(f"<strong>Period:</strong> {report.week_start} to {report.week_end}<br>")
        html_parts.append(f"<strong>Generated:</strong> {report.generated_at}<br>")
        html_parts.append(f"<strong>Total Articles:</strong> {report.total_articles}")
        html_parts.append("</div>")
        
        # Summary
        if report.summary:
            html_parts.append("<h2>Executive Summary</h2>")
            # Convert markdown-style formatting to HTML
            summary_html = report.summary.replace('\n\n', '</p><p>').replace('\n', '<br>')
            html_parts.append(f'<div class="summary"><p>{summary_html}</p></div>')
        
        # Topic Distribution
        if report.articles_by_topic:
            html_parts.append("<h2>Topic Distribution</h2>")
            html_parts.append("<ul>")
            
            sorted_topics = sorted(report.articles_by_topic.items(), 
                                 key=lambda x: x[1], reverse=True)
            
            for topic, count in sorted_topics:
                html_parts.append(f"<li><strong>{topic}:</strong> {count} articles</li>")
            
            html_parts.append("</ul>")
        
        # Top Articles
        if report.top_articles:
            html_parts.append("<h2>Top Articles</h2>")
            
            for i, article in enumerate(report.top_articles[:10], 1):
                html_parts.append('<div class="article">')
                html_parts.append(f"<h3>{i}. {article.title}</h3>")
                
                html_parts.append('<div class="meta">')
                html_parts.append(f'<strong>Source:</strong> {article.source.title()} | ')
                html_parts.append(f'<span class="score">Score: {article.relevance_score:.3f}</span>')
                html_parts.append('</div>')
                
                html_parts.append(f'<p><strong>URL:</strong> <a href="{article.url}" target="_blank">{article.url}</a></p>')
                
                if article.related_topics:
                    topics_str = ", ".join(article.related_topics)
                    html_parts.append(f'<div class="topics"><strong>Topics:</strong> {topics_str}</div>')
                
                if article.summary:
                    html_parts.append(f'<div class="summary">{article.summary}</div>')
                
                html_parts.append("</div>")
        
        # Footer
        html_parts.append("<hr>")
        html_parts.append("<p><em>Generated by ainews - AI-powered news curation system</em></p>")
        html_parts.append("</body></html>")
        
        return "\n".join(html_parts)
    
    def _format_json(self, report: WeeklyReport) -> str:
        """Format report as JSON."""
        return json.dumps(report.to_dict(), indent=2, ensure_ascii=False)
    
    def _format_topic_markdown(self, report_data: Dict[str, Any]) -> str:
        """Format topic report as Markdown."""
        lines = []
        
        # Header
        lines.append(f"# Topic Report: {report_data['topic']}")
        lines.append(f"**Period:** {report_data['period']}")
        lines.append(f"**Articles Found:** {report_data['article_count']}")
        lines.append("")
        
        # Summary
        if 'summary' in report_data and report_data['summary']:
            lines.append("## Summary")
            lines.append(report_data['summary'])
            lines.append("")
        
        # Articles
        if 'articles' in report_data and report_data['articles']:
            lines.append("## Articles")
            
            for i, article_dict in enumerate(report_data['articles'], 1):
                lines.append(f"### {i}. {article_dict['title']}")
                lines.append(f"**Source:** {article_dict['source'].title()}")
                lines.append(f"**URL:** {article_dict['url']}")
                lines.append(f"**Score:** {article_dict['relevance_score']:.3f}")
                
                if article_dict.get('summary'):
                    lines.append(f"**Summary:** {article_dict['summary']}")
                
                lines.append("")
        
        return "\n".join(lines)
    
    def _format_topic_html(self, report_data: Dict[str, Any]) -> str:
        """Format topic report as HTML."""
        # Similar to weekly report HTML but focused on single topic
        html_parts = []
        
        html_parts.append("""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Topic Report</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1, h2, h3 { color: #333; }
        .meta { color: #666; font-size: 0.9em; }
        .article { border: 1px solid #ddd; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .score { background: #007acc; color: white; padding: 2px 6px; border-radius: 3px; font-size: 0.8em; }
        .summary { background: #f9f9f9; padding: 10px; border-left: 3px solid #007acc; margin: 10px 0; }
    </style>
</head>
<body>""")
        
        # Header
        html_parts.append(f"<h1>Topic Report: {report_data['topic']}</h1>")
        html_parts.append(f'<div class="meta">')
        html_parts.append(f"<strong>Period:</strong> {report_data['period']}<br>")
        html_parts.append(f"<strong>Articles Found:</strong> {report_data['article_count']}")
        html_parts.append("</div>")
        
        # Summary
        if 'summary' in report_data and report_data['summary']:
            html_parts.append("<h2>Summary</h2>")
            html_parts.append(f'<div class="summary">{report_data["summary"]}</div>')
        
        # Articles
        if 'articles' in report_data and report_data['articles']:
            html_parts.append("<h2>Articles</h2>")
            
            for i, article_dict in enumerate(report_data['articles'], 1):
                html_parts.append('<div class="article">')
                html_parts.append(f"<h3>{i}. {article_dict['title']}</h3>")
                
                html_parts.append('<div class="meta">')
                html_parts.append(f'<strong>Source:</strong> {article_dict["source"].title()} | ')
                html_parts.append(f'<span class="score">Score: {article_dict["relevance_score"]:.3f}</span>')
                html_parts.append('</div>')
                
                html_parts.append(f'<p><strong>URL:</strong> <a href="{article_dict["url"]}" target="_blank">{article_dict["url"]}</a></p>')
                
                if article_dict.get('summary'):
                    html_parts.append(f'<div class="summary">{article_dict["summary"]}</div>')
                
                html_parts.append("</div>")
        
        html_parts.append("</body></html>")
        
        return "\n".join(html_parts)